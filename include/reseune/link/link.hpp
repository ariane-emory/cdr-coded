#ifndef RESEUNE_LINK_H
#define RESEUNE_LINK_H

#include <cassert>

namespace reseune {
  class link {
  public:

    // =================================================================================================================
    // Typedefs
    // =================================================================================================================
    
    using pointer   = link *;
    using reference = link &;
    using const_iterator = linked_list_forward_const_iterator<link>;
    
    // =================================================================================================================
    // Member fields
    // =================================================================================================================

    pointer next;

    // =================================================================================================================
    // Constructors
    // =================================================================================================================

    constexpr link(): next(nullptr) {}
    
    // =================================================================================================================
    // Printing-related member functions
    // =================================================================================================================
    
    inline void describe_instance() const {
      print_line();
      print_bits<true, false>("link is at", reinterpret_cast<uintptr_t>(this));
      print_bits<true, false>("next",       reinterpret_cast<uintptr_t>(next));
    }

    // =================================================================================================================
    // Other member functions
    // =================================================================================================================
    
    inline void insert_before(pointer next_) {
      next = next_;
    }
    inline void insert_before(reference next_) {
      insert_before(&next_);
    }

    // =================================================================================================================
    // Iterator-related member functions
    // =================================================================================================================
    
    auto begin() const {
      return const_iterator::begin(this);
    }

    auto end() const {
      return const_iterator::end();
    }
    
    // =================================================================================================================
  };
}

#endif
