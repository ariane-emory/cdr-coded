#ifndef RESEUNE_C_STR_CURSOR_HPP
#define RESEUNE_C_STR_CURSOR_HPP

// =================================================================================================================
namespace reseune {
  
  // ===============================================================================================================
  class c_str_cursor {
  protected:
    const char * const m_begin;
    const char * const m_end;
    const char *       m_position;

  public:
  
    // =============================================================================================================
    constexpr inline c_str_cursor(const char * const str) :
      m_begin(str),
      m_end(&m_begin[strlen(str)]),
      m_position(m_begin) {}

    // =============================================================================================================
    constexpr const char * begin() const {
      return m_begin;
    }

    // =============================================================================================================
    constexpr const char * end() const {
      return m_end;
    }
  
    // =============================================================================================================
    inline char operator ++ () {
      ++m_position;
      return *m_position;
    }

    // =============================================================================================================
    inline char operator ++ (int) {
      char c = *m_position;
      ++m_position;
      return c;
    }
  
    // =============================================================================================================
    inline char operator -- () {
      --m_position;
      return *m_position;
    }

    // =============================================================================================================
    inline char operator -- (int) {
      char c = *m_position;
      --m_position;
      return c;
    }

    // =============================================================================================================
  };
  // ===============================================================================================================
}
// =================================================================================================================

#endif
